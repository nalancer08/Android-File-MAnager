package com.appbuilders.libraries;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;

/**
 * Created by Erick Sanchez on 28/10/2016.
 * CEO & CTO App Builders 
 * This class gonna be the security layer
 */

public class Crypher {

	private Context context;

	public Crypher(Context context) {
		this.context = context;
	}

	/****************************************************************
	*						FACEBOOK CONCEAL 						*									
	*****************************************************************/

	/**
	* This method do a 256 key for encrypt and decrypt
	* Depends from Facebook.Conceal
	* @param context: Application context
	*/
	public KeyChain 256Key() {
		
		return new SharedPrefsBackedKeyChain(this.context, CryptoConfig.KEY_256);
	}

	/**
	* This method make a basic encryptation, just use it for simple text
	* Depends from Facebook.Conceal
	* @param key: KeyChain, that have to be storaged in some place
	* @param data: String with the data to be hashed
	*/
	public byte[] simpleEncryption(KeyChain key, String data) {

		Crypto crypto = androidConceal.get().createDefaultCrypto(key);
		return crypto.encrypt(data);
	}

	/**
	* This method make a basic decryption, just use it for simple text
	* Depends from Facebook.Conceal
	* @param key: KeyChain, that have to be storaged in some place
	* @param encryptText: It's the data that have to be decrypted
	*/
	public byte[] simpleDecryption(KeyChain key, byte[] encryptText) {
		
		Crypto crypto = androidConceal.get().createDefaultCrypto(key);
		return crypto.decrypt(encryptText);
	}

	/**
	* This method make a full encryption, used it for bigger files
	* Depends from Facebook.Conceal
	* @param file: File to save the information
	* @param data: String with the contn to be encrypted
	* @param key: KeyChain, that have to be storaged in some place
	* @param entity: Entity, that have to be created previusly, with string_id
	*/
	public void encryption(File file, String data, KeyChain key, String entity) {
		
		Crypto crypto = androidConceal.get().createDefaultCrypto(key);
		if ( !crypto.isAvailable() ) {
			return;
		}

		OutputStream fileStream = new BufferedOutputStream(new FileWriter(file));
		OutputStream outputStream = crypto.getCipherOutputStream(fileStream, Entity.create(entity));
		outputStream.write(data);
		outputStream.close();
	}

	/**
	* This method make a full decrytion, used to decrypt data, that was encryp by encrytion
	* Depends from Facebook.Conceal
	* @param file: File to read the data
	* @param key: keyChain, that have to be storaged in some place
	* @param entity: Entity, that have to be created previusly, with string_id
	*/
	public void decryption(File file, KeyChain key, Entity entity) {

		int read;
		byte[] buffer = new byte[1024];

		Crypto crypto = AndroidConceal.get().createDefaultCrypto(key);
		FileInputStream fileStream = new FileInputStream(file);
		InputStream inputStream = crypto.getCipherInputStream(fileStream, Entity.create(entity));

		while( (read = inputStream.read(buffer)) != -1 ) {
			//out.write(buffer, 0, read);
		}

		inputStream.close();
	}

	/**
	* This method allow a way to check if yout encryptation is correct and can be crypted and decrypted
	* Depends from Facebook.Conceal 
	* @param file: File to write/read the data
	* @param data: bytes taht contains the text that you gonna encrypt
	* @param key: KeyChain, that have to be storaged in some place
	* @param entity: Entity, that have to be created previusly, with string_id
	*/
	public void integrity(File file, byte[] data, KeyChain key, Entity entity) {

		int read;
		byte[] buffer = new byte[1024];

		Crypto crypto = AndroidConceal.get().createDefaultCrypto(key);
		OutputStream outputStream = crypto.getMacOutputStream(fileStream, entity);
		outputStream.write(data);
		outputStream.close();

		InputStream inputStream = crypto.getMacInputStream(fileStream, entity);
		while( (read = inputStream.read(buffer)) != -1 ) {
			//out.write(buffer, 0, read);
		}
		inputStream.close();
	}

	/****************************************************************
	*						CRYPHER OWN METHODS						*									
	*****************************************************************/

	/**
	* This method encrypt a String input into a MD2 String
	* @param data: String with the information to be encrypted
	*/
	public String encryptMd2ToString(String data) {

		return encryptMd2ToString(data.getBytes());
	}

	/**
	* This method encrypt a byte[] input into a MD2 String
	* @param data: String with the information to be encrypted
	*/
	public String encryptMd2ToString(byte[] data) {

		return bytesToHexString(encryptMd2(data));
	}

	/**
	* This method return MD2 byte[] with the encrypted information
	* @param data: byte[] with the information to be encrypted
	*/
	public byte[] encryptMd2(byte[] data) {

		return hashTemplate(data, "MD2");
	}

	/**
	* This method encrypt input String into a MD5 String
	* @param data: String with the information to be encrypted
	*/
	public String encryptMd5ToString(String data) {

		return encryptMd5ToString(data.getBytes());
	}

	/**
	* This method encrypt input String into a MD5 String + Salt
	* @param data: String with the information to be encrypted
	* @param salt: String with the salt information
	*/
	public String encryptMd5ToString(String data, String salt) {

		return bytesToHexString(encryptMd5((data + salt).getBytes()));
	}

	/**
	* This method encrypt a byte[] input into a MD2 String
	* @param data: String with the information to be encrypted
	*/
	public String encryptMd5ToString(byte[] data) {

		return bytesToHexString(encryptMd5(data));
	}

	/**
	* This method encrypt a byte[] input into a MD2 String
	* @param data: String with the information to be encrypted
	* @param salt: byte[] with the salt information
	*/
	public String encryptMd5ToString(byte[] data, byte[] salt) {

		if ( data == null || salt == null ) {
			return null;
		}

		byte[] dataSalt = new byte[data.length + salt.length];
		System.arraycopy(data, 0, dataSalt, 0, data.length);
		System.arraycopy(salt, 0, dataSalt, data.length, salt.length);
		return bytesToHexString(encryptMd5(dataSalt));
	}

	/**
	* This method return MD5 byte[] with the encrypted information
	* @param data: byte[] with the information to be encrypted (it can contains the data + salt)
	*/
	public byte[] encryptMd5(byte[] data) {

		return hashTemplate(data, "MD5");
	}

	public String encryptSha1ToString(String data) {

		return encryptSha1ToString(data.getBytes());
	}

	public String encryptSha1ToString(byte[] data) {

		return bytesToHexString(encryptSha1(data));
	}

	public byte[] encryptSha1(byte[] data) {

		return hashTemplate(data, "SHA1");
	}

	public String encryptSha224ToString(String data) {

		return encryptSha224ToString(data.getBytes());
	}

	public String encryptSha224ToString(byte[] data) {

		return bytesToHexString(encryptSha224(data));
	}

	public byte[] encryptSha224(byte[] data) {

		return hashTemplate(data, "SHA224");
	}

	public String encryptSha256ToString(String data) {

		return encryptSha256ToString(data.getBytes());
	}

	public String encryptSha256ToString(byte[] data) {

		return bytesToHexString(encryptSha256(data));
	}

	public byte[] encryptSha256(byte[] data) {

		return hashTemplate(data, "SHA256");
	}

	public String encryptSha384ToString(String data) {

		return encryptSha384ToString(data.getBytes());
	}

	public String encryptSha384ToString(byte[] data) {

		return bytesToHexString(encryptSha384(data));
	}

	public byte[] encryptSha384(byte[] data) {

		return hashTemplate(data, "SHA384");
	}

	public String encryptSha512ToString(String data) {

		return encryptSha512ToString(data.getBytes());
	}

	public String encryptSha512ToString(byte[] data) {

		return bytesToHexString(encryptSha512(data));
	}

	public byte[] encryptSha512(byte[] data) {

		return hashTemplate(data, "SHA512");
	}

	public byte[] hashTemplate(byte[] data, String algorithm) {

		if ( data == null || data.length <= 0 ) {
			return null;
		}

		try {
			MessageDigest md = MessageDigest.getInstance(algorithm);
			md.update(data);
			return md.digest();

		} catch(NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}
}